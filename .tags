!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ABS	Types.h	36;"	d
BLACK	Colors.h	/^const Color BLACK		= {0x00, 0x00, 0x00, 0xFF};$/;"	v
BLEND_ADD	Types.h	47;"	d
BLEND_ALPHA	Types.h	46;"	d
BLEND_MOD	Types.h	48;"	d
BLEND_NONE	Types.h	45;"	d
BLUE	Colors.h	/^const Color BLUE 		= {0x00, 0x00, 0xFF, 0xFF};$/;"	v
BORDERLESS	Types.h	/^	BORDERLESS	=		SDL_WINDOW_FULLSCREEN_DESKTOP,$/;"	e	enum:__anon9
BlendMode	Types.h	/^typedef SDL_BlendMode		BlendMode;$/;"	t
Bool4	main.c	/^}Bool4;$/;"	t	typeref:union:__anon7	file:
CYAN	Colors.h	/^const Color CYAN		= {0x00, 0xFF, 0xFF, 0xFF};$/;"	v
Color	Types.h	/^typedef SDL_Color 		Color;$/;"	t
Coord	Types.h	/^}Coord, Range, Length, Offset;$/;"	t	typeref:union:__anon10
Coord3	3D.h	/^}Coord3;$/;"	t	typeref:union:__anon26
CoordPair	Types.h	/^}CoordPair, RangePair, LengthPair, OffsetPair;$/;"	t	typeref:union:__anon15
Coordf	Types.h	/^}Coordf, Rangef, Lengthf, Offsetf;$/;"	t	typeref:union:__anon20
D3Inv	3D.h	/^Direction3 D3Inv(const Direction3 d3)$/;"	f
D3_B	3D.h	/^typedef enum{D3_R, D3_L, D3_D, D3_U, D3_F, D3_B}Direction3;$/;"	e	enum:__anon25
D3_D	3D.h	/^typedef enum{D3_R, D3_L, D3_D, D3_U, D3_F, D3_B}Direction3;$/;"	e	enum:__anon25
D3_F	3D.h	/^typedef enum{D3_R, D3_L, D3_D, D3_U, D3_F, D3_B}Direction3;$/;"	e	enum:__anon25
D3_L	3D.h	/^typedef enum{D3_R, D3_L, D3_D, D3_U, D3_F, D3_B}Direction3;$/;"	e	enum:__anon25
D3_R	3D.h	/^typedef enum{D3_R, D3_L, D3_D, D3_U, D3_F, D3_B}Direction3;$/;"	e	enum:__anon25
D3_U	3D.h	/^typedef enum{D3_R, D3_L, D3_D, D3_U, D3_F, D3_B}Direction3;$/;"	e	enum:__anon25
DIM_X	3D.h	/^typedef enum{DIM_X, DIM_Y, DIM_Z}Dimension;$/;"	e	enum:__anon28
DIM_Y	3D.h	/^typedef enum{DIM_X, DIM_Y, DIM_Z}Dimension;$/;"	e	enum:__anon28
DIM_Z	3D.h	/^typedef enum{DIM_X, DIM_Y, DIM_Z}Dimension;$/;"	e	enum:__anon28
DIR_D	Types.h	/^	DIR_D = 0b10,$/;"	e	enum:__anon24
DIR_L	Types.h	/^	DIR_L = 0b11$/;"	e	enum:__anon24
DIR_R	Types.h	/^	DIR_R = 0b01,$/;"	e	enum:__anon24
DIR_U	Types.h	/^	DIR_U = 0b00,$/;"	e	enum:__anon24
Dimension	3D.h	/^typedef enum{DIM_X, DIM_Y, DIM_Z}Dimension;$/;"	t	typeref:enum:__anon28
Direction	Types.h	/^}Direction;$/;"	t	typeref:enum:__anon24
Direction3	3D.h	/^typedef enum{D3_R, D3_L, D3_D, D3_U, D3_F, D3_B}Direction3;$/;"	t	typeref:enum:__anon25
DirectionChar	Types.h	/^const char DirectionChar[4] = {'U', 'R', 'D', 'L'};$/;"	v
Event	Types.h	/^typedef SDL_Event			Event;$/;"	t
FPS	Timing.h	2;"	d
FULLSCREEN	Types.h	/^	FULLSCREEN	=		SDL_WINDOW_FULLSCREEN,$/;"	e	enum:__anon9
File	Types.h	/^typedef FILE			File;$/;"	t
GREEN	Colors.h	/^const Color GREEN 	= {0x00, 0xFF, 0x00, 0xFF};$/;"	v
GREY	Colors.h	/^const Color GREY		= {0x80, 0x80, 0x80, 0xFF};$/;"	v
GREY1	Colors.h	/^const Color GREY1		= {0xAA, 0xAA, 0xAA, 0xFF};$/;"	v
GREY2	Colors.h	/^const Color GREY2		= {0x7E, 0x7E, 0x7E, 0xFF};$/;"	v
GREY3	Colors.h	/^const Color GREY3		= {0x52, 0x52, 0x52, 0xFF};$/;"	v
I16MAX	Types.h	25;"	d
I16MIN	Types.h	24;"	d
I32MAX	Types.h	27;"	d
I32MIN	Types.h	26;"	d
I64MAX	Types.h	29;"	d
I64MIN	Types.h	28;"	d
I8MAX	Types.h	23;"	d
I8MIN	Types.h	22;"	d
Img	Types.h	/^typedef SDL_Surface 		Img;$/;"	t
Key	Types.h	/^typedef SDL_Keycode 		Key;$/;"	t
Length	Types.h	/^}Coord, Range, Length, Offset;$/;"	t	typeref:union:__anon10
LengthPair	Types.h	/^}CoordPair, RangePair, LengthPair, OffsetPair;$/;"	t	typeref:union:__anon15
Lengthf	Types.h	/^}Coordf, Rangef, Lengthf, Offsetf;$/;"	t	typeref:union:__anon20
MAGENTA	Colors.h	/^const Color MAGENTA	= {0xFF, 0x00, 0xFF, 0xFF};$/;"	v
Map	Map.h	/^}Map;$/;"	t	typeref:struct:__anon29
Offset	Types.h	/^}Coord, Range, Length, Offset;$/;"	t	typeref:union:__anon10
OffsetPair	Types.h	/^}CoordPair, RangePair, LengthPair, OffsetPair;$/;"	t	typeref:union:__anon15
Offsetf	Types.h	/^}Coordf, Rangef, Lengthf, Offsetf;$/;"	t	typeref:union:__anon20
PI	Types.h	50;"	d
PINK	Colors.h	/^const Color PINK		= {0xFF, 0xC0, 0xCB, 0xFF};$/;"	v
Pac	main.c	/^}Pac;$/;"	t	typeref:struct:__anon6	file:
RED	Colors.h	/^const Color RED 		= {0xFF, 0x00, 0x00, 0xFF};$/;"	v
Range	Types.h	/^}Coord, Range, Length, Offset;$/;"	t	typeref:union:__anon10
RangePair	Types.h	/^}CoordPair, RangePair, LengthPair, OffsetPair;$/;"	t	typeref:union:__anon15
Rangef	Types.h	/^}Coordf, Rangef, Lengthf, Offsetf;$/;"	t	typeref:union:__anon20
Rect	Types.h	/^typedef SDL_Rect 			Rect;$/;"	t
TB_create	Text.h	/^TextBox* TB_create(uint x, uint y, const char* text)$/;"	f
TB_destroy	Text.h	/^void TB_destroy(TextBox *tb)$/;"	f
TB_draw	Text.h	/^void TB_draw(TextBox *tb)$/;"	f
TB_setText	Text.h	/^void TB_setText(TextBox *tb, const char *text)$/;"	f
TB_setTextSize	Text.h	/^void TB_setTextSize(TextBox *tb, int size)$/;"	f
TPF	Timing.h	3;"	d
TPS	Timing.h	4;"	d
TextBox	Text.h	/^}TextBox;$/;"	t	typeref:struct:__anon5
Ticks	Types.h	/^typedef unsigned int		Ticks;$/;"	t
Time	Types.h	/^typedef time_t			Time;$/;"	t
U16MAX	Types.h	32;"	d
U32MAX	Types.h	33;"	d
U64MAX	Types.h	34;"	d
U8MAX	Types.h	31;"	d
WHITE	Colors.h	/^const Color WHITE		= {0xFF, 0xFF, 0xFF, 0xFF};$/;"	v
WINDOWED	Types.h	/^	WINDOWED	=		0$/;"	e	enum:__anon9
WindowMode	Types.h	/^}WindowMode;$/;"	t	typeref:enum:__anon9
YELLOW	Colors.h	/^const Color YELLOW	= {0xFF, 0xFF, 0x00, 0xFF};$/;"	v
ZFLOOR	Types.h	37;"	d
arr	3D.h	/^	int arr[3];$/;"	m	union:__anon26
arr	Types.h	/^	Coord arr[2];$/;"	m	union:__anon15
arr	Types.h	/^	float arr[2];$/;"	m	union:__anon20
arr	Types.h	/^	int arr[2];$/;"	m	union:__anon10
arr	main.c	/^	bool arr[4];$/;"	m	union:__anon7	file:
atIntersection	main.c	/^bool atIntersection(const Coord wpos, const uint scale)$/;"	f
backColor	Text.h	/^	Color backColor;$/;"	m	struct:__anon5
bezier	Graphics.h	/^void bezier(const Coord *pos, const uint numc, const uint nums)$/;"	f
c1	Types.h	/^		Coord c1;$/;"	m	struct:__anon15::__anon16
c1	Types.h	/^		int c1;$/;"	m	struct:__anon10::__anon11
c2	Types.h	/^		Coord c2;$/;"	m	struct:__anon15::__anon16
c2	Types.h	/^		int c2;$/;"	m	struct:__anon10::__anon11
charToInt	GetInt.h	/^int charToInt(const char c)$/;"	f
checkDir	Map.h	/^bool checkDir(const Map map,const Coord coord,const Direction dir,const char c)$/;"	f
clamp	Coords.h	/^int clamp(const int n, const int min, const int max)$/;"	f
clear	Graphics.h	/^void clear(void)$/;"	f
clearTerminal	DogeUtil.h	/^void clearTerminal(void)$/;"	f
colorToU32	Graphics.h	/^u32 colorToU32(const Color c)$/;"	f
coord3Project	3D.h	/^Coord coord3Project(const Coord3 c3, const Range win, const Offset zscale)$/;"	f
coord3Shift	3D.h	/^Coord3 coord3Shift(const Coord3 c3, const Direction3 d3, const int units)$/;"	f
coordAdd	Coords.h	/^Coord coordAdd(const Coord coord, const uint num)$/;"	f
coordClamp	Coords.h	/^Coord coordClamp(const Coord coord, const Range x, const Range y)$/;"	f
coordDistSq	Coords.h	/^uint coordDistSq(const Coord coord1, const Coord coord2)$/;"	f
coordDiv	Coords.h	/^Coord coordDiv(const Coord coord, const int num)$/;"	f
coordInRange	Coords.h	/^bool coordInRange(const Coord coord, const Range range)$/;"	f
coordInRangePair	Coords.h	/^bool coordInRangePair(const Coord coord, const RangePair range)$/;"	f
coordInRect	Coords.h	/^bool coordInRect(const Coord coord, const Rect rect)$/;"	f
coordInv	Coords.h	/^Coord coordInv(const Coord coord)$/;"	f
coordMax	Coords.h	/^int coordMax(const Coord coord)$/;"	f
coordMin	Coords.h	/^int coordMin(const Coord coord)$/;"	f
coordMod	Coords.h	/^Coord coordMod(const Coord coord, const int num)$/;"	f
coordMul	Coords.h	/^Coord coordMul(const Coord coord, const int num)$/;"	f
coordNz	Coords.h	/^bool coordNz(const Coord coord)$/;"	f
coordOffset	Coords.h	/^Coord coordOffset(const Coord coord, const Offset off)$/;"	f
coordOffsetMul	Coords.h	/^Coord coordOffsetMul(const Coord coord1, const Coord coord2)$/;"	f
coordPairToRect	Coords.h	/^Rect coordPairToRect(const Coord coord1, const Coord coord2)$/;"	f
coordSame	Coords.h	/^bool coordSame(const Coord pos1, const Coord pos2)$/;"	f
coordShift	Coords.h	/^Coord coordShift(const Coord coord, const Direction dir, const int units)$/;"	f
coordSub	Coords.h	/^Coord coordSub(const Coord coord1, const Coord coord2)$/;"	f
coordWrap	Coords.h	/^Coord coordWrap(const Coord coord, const Range x, const Range y)$/;"	f
coordfDist	Coords.h	/^float coordfDist(const Coordf coord1, const Coordf coord2)$/;"	f
coordfDiv	Coords.h	/^Coordf coordfDiv(const Coordf coord, const float num)$/;"	f
coordfNormalize	Coords.h	/^Coordf coordfNormalize(const Coordf coord)$/;"	f
coordfOffsetMul	Coords.h	/^Coordf coordfOffsetMul(const Coordf coord1, const Coordf coord2)$/;"	f
coordfToRads	Angles.h	/^float coordfToRads(const Coordf coord)$/;"	f
d	main.c	/^		bool d;$/;"	m	struct:__anon7::__anon8	file:
defaultColor	Graphics.h	/^	Color defaultColor;$/;"	m	struct:__anon4
dimensionShift	3D.h	/^Coord3 dimensionShift(const Coord3 c3, const Dimension dim, const int units)$/;"	f
dir	main.c	/^	Direction dir;$/;"	m	struct:__anon6	file:
dirAXP	Coords.h	/^bool dirAXP(const Direction dir1, const Direction dir2)$/;"	f
dirAXT	Coords.h	/^bool dirAXT(const Direction dir1, const Direction dir2)$/;"	f
dirINV	Coords.h	/^Direction dirINV(const Direction dir)$/;"	f
dirKey	main.c	/^bool dirKey(const Direction dir)$/;"	f
dirKeyEx	main.c	/^bool dirKeyEx(const Direction dir)$/;"	f
dirLR	Coords.h	/^Direction dirLR(const Direction dir)$/;"	f
dirNEG	Coords.h	/^Direction dirNEG(const Direction dir)$/;"	f
dirPOS	Coords.h	/^Direction dirPOS(const Direction dir)$/;"	f
dirROL	Coords.h	/^Direction dirROL(const Direction dir)$/;"	f
dirROR	Coords.h	/^Direction dirROR(const Direction dir)$/;"	f
dirUD	Coords.h	/^Direction dirUD(const Direction dir)$/;"	f
draw	Graphics.h	/^void draw(void)$/;"	f
drawCircle	Graphics.h	/^void drawCircle(const uint x, const uint y, const uint radius)$/;"	f
drawCircleCoord	Graphics.h	/^void drawCircleCoord(const Coord pos, const uint radius)$/;"	f
drawDot	Draw.h	/^void drawDot(const Map map, const Coord coord, const bool big)$/;"	f
drawHLine	Graphics.h	/^void drawHLine(const uint x, const uint y, int len)$/;"	f
drawImg	Image.h	/^void drawImg(Img *image)$/;"	f
drawLine	Graphics.h	/^void drawLine(const uint x1, const uint y1, const uint x2, const uint y2)$/;"	f
drawLineCoord3	3D.h	/^void drawLineCoord3(const Coord3 pos1, const Coord3 pos2, const Range win, const Offset zscale)$/;"	f
drawLineCoords	Graphics.h	/^void drawLineCoords(const Coord pos1, const Coord pos2)$/;"	f
drawMap	Draw.h	/^void drawMap(const Map map)$/;"	f
drawPac	main.c	/^void drawPac(const Pac pac)$/;"	f
drawPixel	Graphics.h	/^void drawPixel(const uint x, const uint y)$/;"	f
drawPixelCoord	Graphics.h	/^void drawPixelCoord(const Coord pos)$/;"	f
drawPoly	Graphics.h	/^void drawPoly(Coord *pos, const uint num)$/;"	f
drawRect	Graphics.h	/^void drawRect(const uint x, const uint y, const uint xlen, const uint ylen)$/;"	f
drawRectCoords	Graphics.h	/^void drawRectCoords(const Coord pos1, const Coord pos2)$/;"	f
drawSquare	Graphics.h	/^void drawSquare(const uint x, const uint y, const uint len)$/;"	f
drawSquareCoord	Graphics.h	/^void drawSquareCoord(const Coord pos, const uint len)$/;"	f
drawText	Text.h	/^void drawText(uint x, uint y, const char *text)$/;"	f
drawTextCentered	Text.h	/^void drawTextCentered(uint x, uint y, const char *text)$/;"	f
drawTextCenteredCoord	Text.h	/^void drawTextCenteredCoord(const Coord pos, const char *text)$/;"	f
drawTextCoord	Text.h	/^Coord drawTextCoord(const Coord pos, const char *text)$/;"	f
drawTri	Graphics.h	/^void drawTri(const Coord pos1, const Coord pos2, const Coord pos3)$/;"	f
drawVLine	Graphics.h	/^void drawVLine(const uint x, const uint y, int len)$/;"	f
drawWall	Draw.h	/^void drawWall(const Map map, const Coord coord)$/;"	f
events	Events.h	/^void events(const Ticks frameEnd)$/;"	f
fillBorder	Graphics.h	/^void fillBorder(uint x, uint y, uint xlen, uint ylen, int b)$/;"	f
fillBorderCoords	Graphics.h	/^void fillBorderCoords(const Coord pos, const Length len, const int b)$/;"	f
fillCircle	Graphics.h	/^void fillCircle(const uint x, const uint y, const uint radius)$/;"	f
fillCircleCoord	Graphics.h	/^void fillCircleCoord(const Coord pos, const uint radius)$/;"	f
fillHCircle	Graphics.h	/^void fillHCircle(const uint x, const uint y,$/;"	f
fillPoly	Graphics.h	/^void fillPoly(Coord *pos, const uint num)$/;"	f
fillRect	Graphics.h	/^void fillRect(const uint x, const uint y, const uint xlen, const uint ylen)$/;"	f
fillRectCoords	Graphics.h	/^void fillRectCoords(const Coord pos1, const Coord pos2)$/;"	f
fillScreen	Graphics.h	/^void fillScreen(void)$/;"	f
fillSquare	Graphics.h	/^void fillSquare(const uint x, const uint y, const uint len)$/;"	f
fillSquareCoord	Graphics.h	/^void fillSquareCoord(const Coord pos, const uint len)$/;"	f
fillTri	Graphics.h	/^void fillTri(const Coord pos1, const Coord pos2, const Coord pos3)$/;"	f
font	Graphics.h	/^	TTF_Font* font;$/;"	m	struct:__anon4
fontColor	Graphics.h	/^	Color fontColor;$/;"	m	struct:__anon4
fontSize	Graphics.h	/^	int fontSize;$/;"	m	struct:__anon4
freeImg	Image.h	/^void freeImg(Img *image)$/;"	f
frozen	main.c	/^	bool frozen;$/;"	m	struct:__anon6	file:
frozenEnd	main.c	/^	Ticks frozenEnd;$/;"	m	struct:__anon6	file:
getColor	Graphics.h	/^Color getColor(void)$/;"	f
getDirKeyChar	Input.h	/^char getDirKeyChar(const Direction dir)$/;"	f
getDirKeyStr	Input.h	/^const char* getDirKeyStr(const Direction dir)$/;"	f
getInt	GetInt.h	/^int getInt(void)$/;"	f
getMapLen	Map.h	/^Length getMapLen(File *mapFile)$/;"	f
getMapLineLen	Map.h	/^uint getMapLineLen(File *mapFile)$/;"	f
getR	GetInt.h	/^int getR(const int num)$/;"	f
getSpawnCoord	Map.h	/^Coord getSpawnCoord(const Map map)$/;"	f
getSpawnDir	Map.h	/^Direction getSpawnDir(const Map map, const Coord spawn)$/;"	f
getTicks	Timing.h	/^Ticks getTicks(void)$/;"	f
getTicksIn	Timing.h	/^Ticks getTicksIn(const uint sec)$/;"	f
gfx	Graphics.h	/^}gfx = {};$/;"	v	typeref:struct:__anon4
gfx_init	Graphics.h	/^void gfx_init(const uint winXlen, const uint winYlen)$/;"	f
gfx_quit	Graphics.h	/^void gfx_quit(void)$/;"	f
i16	Types.h	/^typedef int16_t			i16;$/;"	t
i32	Types.h	/^typedef int32_t			i32;$/;"	t
i64	Types.h	/^typedef int64_t			i64;$/;"	t
i8	Types.h	/^typedef int8_t			i8;$/;"	t
img_init	Image.h	/^void img_init(void)$/;"	f
img_quit	Image.h	/^void img_quit(void)$/;"	f
inBound	Coords.h	/^bool inBound(const int n, const int min, const int max)$/;"	f
inMap	Map.h	/^bool inMap(const Coord coord, const Length len)$/;"	f
inRange	Coords.h	/^bool inRange(const int n, const Range range)$/;"	f
init	DogeUtil.h	/^void init(const Range win)$/;"	f
intToChar	GetInt.h	/^char intToChar(const int num)$/;"	f
intToStr	GetInt.h	/^void intToStr(int num, char* str)$/;"	f
isD3DU	3D.h	/^bool isD3DU(const Direction3 d3)$/;"	f
isD3FB	3D.h	/^bool isD3FB(const Direction3 d3)$/;"	f
isD3Neg	3D.h	/^bool isD3Neg(const Direction3 d3)$/;"	f
isD3Pos	3D.h	/^bool isD3Pos(const Direction3 d3)$/;"	f
isD3RL	3D.h	/^bool isD3RL(const Direction3 d3)$/;"	f
key	Input.h	/^	u8 key[SDL_NUM_SCANCODES];$/;"	m	struct:__anon3
keyHeld	Input.h	/^bool keyHeld(const SDL_Scancode key)$/;"	f
keyPressed	Input.h	/^bool keyPressed(const SDL_Scancode key)$/;"	f
keyReleased	Input.h	/^bool keyReleased(const SDL_Scancode key)$/;"	f
keyState	Input.h	/^bool keyState(const SDL_Scancode key)$/;"	f
keys	Input.h	/^}keys = {0};$/;"	v	typeref:struct:__anon3
l	main.c	/^		bool l;$/;"	m	struct:__anon7::__anon8	file:
len	Map.h	/^	Length len;$/;"	m	struct:__anon29
lint	Types.h	/^typedef long int			lint;$/;"	t
loadDrawImg	Image.h	/^void loadDrawImg(const char *imgFile)$/;"	f
loadImg	Image.h	/^Img* loadImg(const char *imgFile)$/;"	f
main	main.c	/^int main(int argc, char const *argv[])$/;"	f
max	Types.h	/^		Coord max;$/;"	m	struct:__anon15::__anon18
max	Types.h	/^		float max;$/;"	m	struct:__anon20::__anon22
max	Types.h	/^		int max;$/;"	m	struct:__anon10::__anon13
min	Types.h	/^		Coord min;$/;"	m	struct:__anon15::__anon18
min	Types.h	/^		float min;$/;"	m	struct:__anon20::__anon22
min	Types.h	/^		int min;$/;"	m	struct:__anon10::__anon13
mouse	Input.h	/^}mouse = {0};$/;"	v	typeref:struct:__anon1
movePac	main.c	/^Pac movePac(Pac pac, const Map map)$/;"	f
neg	Types.h	/^		Coord neg;$/;"	m	struct:__anon15::__anon19
neg	Types.h	/^		float neg;$/;"	m	struct:__anon20::__anon23
neg	Types.h	/^		int neg;$/;"	m	struct:__anon10::__anon14
offsetFlip	Coords.h	/^Offset offsetFlip(const Offset off)$/;"	f
offsetRol	Coords.h	/^Offset offsetRol(const Offset off)$/;"	f
offsetRor	Coords.h	/^Offset offsetRor(const Offset off)$/;"	f
parseMap	Map.h	/^char** parseMap(File *mapFile, const Length len)$/;"	f
pos	Input.h	/^		Coord pos;$/;"	m	struct:__anon1::__anon2
pos	Input.h	/^	Coord pos;$/;"	m	struct:__anon1
pos	Types.h	/^		Coord pos;$/;"	m	struct:__anon15::__anon19
pos	Types.h	/^		float pos;$/;"	m	struct:__anon20::__anon23
pos	Types.h	/^		int pos;$/;"	m	struct:__anon10::__anon14
pos	main.c	/^	Coord pos;$/;"	m	struct:__anon6	file:
power	main.c	/^	bool power;$/;"	m	struct:__anon6	file:
powerEnd	main.c	/^	Ticks powerEnd;$/;"	m	struct:__anon6	file:
prev	Input.h	/^	u8 prev[SDL_NUM_SCANCODES];$/;"	m	struct:__anon3
prev	Input.h	/^	}prev;$/;"	m	struct:__anon1	typeref:struct:__anon1::__anon2
printMap	Map.h	/^void printMap(const Map map)$/;"	f
r	Text.h	/^	Rect r;$/;"	m	struct:__anon5
r	main.c	/^		bool r;$/;"	m	struct:__anon7::__anon8	file:
randRange	DogeUtil.h	/^float randRange(float a, float b)$/;"	f
readMap	Map.h	/^Map readMap(const char *mapName)$/;"	f
rectToCoordPair	Coords.h	/^CoordPair rectToCoordPair(const Rect rect)$/;"	f
renderer	Graphics.h	/^	SDL_Renderer* renderer;$/;"	m	struct:__anon4
rgbToColor	Colors.h	/^Color rgbToColor(const uint R, const uint G, const uint B)$/;"	f
rgbaToColor	Colors.h	/^Color rgbaToColor(const uint R, const uint G, const uint B, const uint A)$/;"	f
saveScreenshot	Graphics.h	/^void saveScreenshot(const char* file_name)$/;"	f
scale	Map.h	/^	uint scale;$/;"	m	struct:__anon29
scale	main.c	/^	uint scale;$/;"	m	struct:__anon6	file:
secToTicks	Timing.h	/^Ticks secToTicks(const uint sec)$/;"	f
setBlend	Graphics.h	/^void setBlend(const BlendMode mode)$/;"	f
setColor	Graphics.h	/^void setColor(const Color c)$/;"	f
setFontColor	Text.h	/^void setFontColor(Color c)$/;"	f
setFontSize	Text.h	/^void setFontSize(int size)$/;"	f
setRGB	Graphics.h	/^void setRGB(const u8 r, const u8 g, const u8 b)$/;"	f
setRGBA	Graphics.h	/^void setRGBA(const u8 r, const u8 g, const u8 b, const u8 a)$/;"	f
setWindowMode	Graphics.h	/^void setWindowMode(const WindowMode mode)$/;"	f
setWindowSize	Graphics.h	/^void setWindowSize(const uint x, const uint y)$/;"	f
shiftL	GetInt.h	/^int shiftL(int num, int digits)$/;"	f
shiftPac	main.c	/^Pac shiftPac(Pac pac)$/;"	f
shiftR	GetInt.h	/^int shiftR(const int num)$/;"	f
size	Text.h	/^	int size;$/;"	m	struct:__anon5
sprite	main.c	/^	Img *sprite;$/;"	m	struct:__anon6	file:
state	Input.h	/^		u32 state;$/;"	m	struct:__anon1::__anon2
state	Input.h	/^	u32 state;$/;"	m	struct:__anon1
strToInt	GetInt.h	/^int strToInt(const char *str)$/;"	f
text	Map.h	/^	char **text;$/;"	m	struct:__anon29
text	Text.h	/^	char* text;$/;"	m	struct:__anon5
textColor	Text.h	/^	Color textColor;$/;"	m	struct:__anon5
text_init	Text.h	/^void text_init(void)$/;"	f
text_quit	Text.h	/^void text_quit(void)$/;"	f
tileSolid	main.c	/^bool tileSolid(const Coord tpos, const Map map)$/;"	f
tposToWposm	Map.h	/^Coord tposToWposm(const Coord tile, const uint scale)$/;"	f
u	main.c	/^		bool u;$/;"	m	struct:__anon7::__anon8	file:
u16	Types.h	/^typedef uint16_t			u16;$/;"	t
u32	Types.h	/^typedef uint32_t			u32;$/;"	t
u64	Types.h	/^typedef uint64_t			u64;$/;"	t
u8	Types.h	/^typedef uint8_t			u8;$/;"	t
uchar	Types.h	/^typedef unsigned char		uchar;$/;"	t
uint	Types.h	/^typedef unsigned int		uint;$/;"	t
ul	Types.h	/^typedef unsigned long		ul;$/;"	t
ull	Types.h	/^typedef unsigned long long	ull;$/;"	t
vec	Input.h	/^	Offset vec;$/;"	m	struct:__anon1
warpable	main.c	/^	bool warpable;$/;"	m	struct:__anon6	file:
window	Graphics.h	/^	SDL_Window* window;$/;"	m	struct:__anon4
wposToTpos	main.c	/^Coord wposToTpos(const Coord wpos, const uint scale)$/;"	f
wrap	Coords.h	/^int wrap(const int n, const int min, const int max)$/;"	f
x	3D.h	/^		int x;$/;"	m	struct:__anon26::__anon27
x	Types.h	/^		Coord x;$/;"	m	struct:__anon15::__anon17
x	Types.h	/^		float x;$/;"	m	struct:__anon20::__anon21
x	Types.h	/^		int x;$/;"	m	struct:__anon10::__anon12
xlen	Graphics.h	/^	uint xlen, ylen;$/;"	m	struct:__anon4
y	3D.h	/^		int y;$/;"	m	struct:__anon26::__anon27
y	Types.h	/^		Coord y;$/;"	m	struct:__anon15::__anon17
y	Types.h	/^		float y;$/;"	m	struct:__anon20::__anon21
y	Types.h	/^		int y;$/;"	m	struct:__anon10::__anon12
ylen	Graphics.h	/^	uint xlen, ylen;$/;"	m	struct:__anon4
z	3D.h	/^		int z;$/;"	m	struct:__anon26::__anon27
